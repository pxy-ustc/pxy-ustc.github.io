<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nemo Pan&#39;s Blog</title>
  
  <subtitle>驾着七彩祥云</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-16T13:35:06.495Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Nemo Pan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毫米波雷达基础（一）</title>
    <link href="http://example.com/2022/08/08/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/08/08/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-08-08T14:38:21.000Z</published>
    <updated>2022-08-16T13:35:06.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="毫米波雷达的优点"><a class="header-anchor" href="#毫米波雷达的优点">¶</a>毫米波雷达的优点</h2><p>毫米波（mmWave）雷达是一类使用短波长电磁波的特殊雷达，其发射波长为毫米量级的信号。电磁频谱如下图所示，毫米波波长被视为短波长。<br><img src="/2022/08/08/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/%E7%94%B5%E7%A3%81%E9%A2%91%E8%B0%B1.jpg" alt="电磁频谱"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;毫米波雷达的优点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#毫米波雷达的优点&quot;&gt;¶&lt;/a&gt;毫米波雷达的优点&lt;/h2&gt;
&lt;p&gt;毫米波（mmWave）雷达是一类使用短波长电磁波的特殊雷达，其发射波长为毫米量级的信号。电磁频谱如下图所示，毫米波波</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 学习（第 4 章）</title>
    <link href="http://example.com/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/"/>
    <id>http://example.com/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/</id>
    <published>2021-05-02T01:15:19.000Z</published>
    <updated>2021-05-04T12:58:24.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-4-章：通过实际操作学习-Git"><a class="header-anchor" href="#第-4-章：通过实际操作学习-Git">¶</a>第 4 章：通过实际操作学习 Git</h2><h3 id="4-1-基本操作"><a class="header-anchor" href="#4-1-基本操作">¶</a>4.1 基本操作</h3><h4 id="4-1-1-初始化仓库"><a class="header-anchor" href="#4-1-1-初始化仓库">¶</a>4.1.1 初始化仓库</h4><p>要使用 Git 进行版本管理，必须先初始化仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir git-tutorial</span><br><span class="line"><span class="built_in">cd</span> git-tutorial</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>其中工作目录中的内容称为“附属于该仓库的工作树”。</p><span id="more"></span><h4 id="4-1-2-查看仓库的状态"><a class="header-anchor" href="#4-1-2-查看仓库的状态">¶</a>4.1.2 查看仓库的状态</h4><p><code>git status</code> 命令用于显示 Git 仓库的状态。</p><h4 id="4-1-3-向暂存区中添加文件"><a class="header-anchor" href="#4-1-3-向暂存区中添加文件">¶</a>4.1.3 向暂存区中添加文件</h4><p>要让文件成为 Git 仓库的管理对象，就需要用 git add 命令将其加入暂存区（ stage 或者 Index ）中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="4-1-4-保存仓库的历史记录"><a class="header-anchor" href="#4-1-4-保存仓库的历史记录">¶</a>4.1.4 保存仓库的历史记录</h4><p><code>git commit</code> 命令可以将当前暂存区中的文件实际保存到仓库的历史记录中。通过这些记录，我们就能在工作树中复员文件。</p><h4 id="4-1-5-查看提交日志"><a class="header-anchor" href="#4-1-5-查看提交日志">¶</a>4.1.5 查看提交日志</h4><p><code>git log</code> 命令可以查看以往仓库中提交的日志。</p><h4 id="4-1-6-查看更改前后的差别"><a class="header-anchor" href="#4-1-6-查看更改前后的差别">¶</a>4.1.6 查看更改前后的差别</h4><p><code>git diff</code> 命令可以查看工作树、暂存区、最新提交之间的差别。</p><h3 id="4-2-分支的操作"><a class="header-anchor" href="#4-2-分支的操作">¶</a>4.2 分支的操作</h3><p>在进行多个并行作业时，我们会用到分支。在这类并行开发的过程中，往往同时存在多个最新代码状态。<br><img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-19-22-12.png" alt="分支"><br>不同分支中，可以同时进行完全不同的作业。等该分支的作业完成后再与master分支合并。<br><img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-19-25-55.png" alt="分支结束"></p><h4 id="4-2-1-显示分支一览表"><a class="header-anchor" href="#4-2-1-显示分支一览表">¶</a>4.2.1 显示分支一览表</h4><p><code>git branch</code> 命令可以将分支名列表显示，同时可以确认当前所在的分支。</p><h4 id="4-2-2-创建、切换分支"><a class="header-anchor" href="#4-2-2-创建、切换分支">¶</a>4.2.2 创建、切换分支</h4><p>以当前 master 分支为基础创建新的分支，需要用到 <code>git checkout -b</code>命令。</p><h4 id="4-2-3-特性分支与主干分支"><a class="header-anchor" href="#4-2-3-特性分支与主干分支">¶</a>4.2.3 特性分支与主干分支</h4><p>特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。通常用 master 为主干分支，也是合并的终点。<br><img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-20-06-52.png" alt="特性分支"></p><h4 id="4-2-4-合并分支"><a class="header-anchor" href="#4-2-4-合并分支">¶</a>4.2.4 合并分支</h4><p>利用 <code>git merge</code> 命令可以将分支合并到 master 主干分支。</p><h4 id="4-2-5-以图表形式查看分支"><a class="header-anchor" href="#4-2-5-以图表形式查看分支">¶</a>4.2.5 以图表形式查看分支</h4><p>以图表形式输出提交日志需要用到 <code>git log --graph</code> 命令，非常直观。</p><h3 id="4-3-更改提交的操作"><a class="header-anchor" href="#4-3-更改提交的操作">¶</a>4.3 更改提交的操作</h3><p>Git 的另一特性是可以灵活操作历史版本。</p><h4 id="4-3-1-回溯历史版本"><a class="header-anchor" href="#4-3-1-回溯历史版本">¶</a>4.3.1 回溯历史版本</h4><p>例如，回溯到创建 feature-A 分支之前，创建一个 fix-B 特性分支。<br><img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-20-16-04.png" alt="回溯历史"><br>要让仓库的 HEAD、暂存区、当前工作树回溯到指定状态，需要用到 <code>git reset --hard</code> 命令。执行 <code>git reflog</code> 命令，查看当前仓库执行过的操作的日志。</p><h4 id="4-3-2-修改提交信息"><a class="header-anchor" href="#4-3-2-修改提交信息">¶</a>4.3.2 修改提交信息</h4><p>要修改提交的信息，可以执行 <code>git commit --amend</code> 命令。</p><h3 id="4-4-推送至远程仓库"><a class="header-anchor" href="#4-4-推送至远程仓库">¶</a>4.4 推送至远程仓库</h3><p>使用 <code>git remote add</code> 命令设置本地仓库的远程仓库。将当前分支下本地仓库的内容推送至远程仓库，需要用到 <code>git push</code> 命令。</p><h3 id="4-5-从远程仓库获取"><a class="header-anchor" href="#4-5-从远程仓库获取">¶</a>4.5 从远程仓库获取</h3><h4 id="4-5-1-获取远程仓库"><a class="header-anchor" href="#4-5-1-获取远程仓库">¶</a>4.5.1 获取远程仓库</h4><p>执行 <code>git clone</code> 命令将 Github 上的仓库 clone 至本地。</p><h4 id="4-5-2-获取最新的远程仓库分支"><a class="header-anchor" href="#4-5-2-获取最新的远程仓库分支">¶</a>4.5.2 获取最新的远程仓库分支</h4><p>执行 <code>git pull</code> 命令，可以将本地仓库更新至最新状态。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第-4-章：通过实际操作学习-Git&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第-4-章：通过实际操作学习-Git&quot;&gt;¶&lt;/a&gt;第 4 章：通过实际操作学习 Git&lt;/h2&gt;
&lt;h3 id=&quot;4-1-基本操作&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#4-1-基本操作&quot;&gt;¶&lt;/a&gt;4.1 基本操作&lt;/h3&gt;
&lt;h4 id=&quot;4-1-1-初始化仓库&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#4-1-1-初始化仓库&quot;&gt;¶&lt;/a&gt;4.1.1 初始化仓库&lt;/h4&gt;
&lt;p&gt;要使用 Git 进行版本管理，必须先初始化仓库。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir git-tutorial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; git-tutorial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中工作目录中的内容称为“附属于该仓库的工作树”。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 学习（第 3 章）</title>
    <link href="http://example.com/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/"/>
    <id>http://example.com/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/</id>
    <published>2021-05-01T05:20:59.000Z</published>
    <updated>2021-05-01T08:58:15.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-3-章：使用-GitHub-的前期准备"><a class="header-anchor" href="#第-3-章：使用-GitHub-的前期准备">¶</a>第 3 章：使用 GitHub 的前期准备</h2><h3 id="3-1-使用前的准备"><a class="header-anchor" href="#3-1-使用前的准备">¶</a>3.1 使用前的准备</h3><h4 id="3-1-1-设置-SSH-Key"><a class="header-anchor" href="#3-1-1-设置-SSH-Key">¶</a>3.1.1 设置 SSH Key</h4><p>GitHub 上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥认证方式进行的。</p><h4 id="3-1-2-使用社区功能"><a class="header-anchor" href="#3-1-2-使用社区功能">¶</a>3.1.2 使用社区功能</h4><p>通过 Follow 感兴趣的人，来知道他在 GitHub 上的行为。<br><img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-17-07.png" alt="Follow"><br>对于仓库，还可以用 Watch 功能获取最新的开发信息。<br><img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-19-06.png" alt="Watch"></p><span id="more"></span><h3 id="3-2-实际动手使用"><a class="header-anchor" href="#3-2-实际动手使用">¶</a>3.2 实际动手使用</h3><h4 id="3-2-1-clone-已有仓库"><a class="header-anchor" href="#3-2-1-clone-已有仓库">¶</a>3.2.1 clone 已有仓库</h4><p>将已有的仓库 clone 到身边的开发环境中。<br><img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-30-34.png" alt="clone"><br>在 Git Bash 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:hirocastest/Hello-World.git</span><br></pre></td></tr></table></figure><p>在输入 GitHub 上设置的公开密钥的密码，并认证成功后，仓库便会被 clone 至仓库名后的目录中。将想要公开的代码提交至这个仓库再 push 到 GitHub 仓库中，代码便会被公开。</p><h4 id="3-2-2-编写代码"><a class="header-anchor" href="#3-2-2-编写代码">¶</a>3.2.2 编写代码</h4><p>编写代码文件后，例如 hello_world.php，由于还未被添加至 Git 仓库，所以输入命令 <code>git status</code> 显示为 Untracked files。</p><h4 id="3-2-3-提交代码"><a class="header-anchor" href="#3-2-3-提交代码">¶</a>3.2.3 提交代码</h4><p>将 hello_world.php 提交至仓库，该文件就进入版本管理系统的管理之下，由 Git 进行管理。</p><p>通过 <code>git add</code> 命令将文件加入暂存区，再通过 <code>git commit</code> 命令提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add hello_world.php</span><br><span class="line">git commit -m <span class="string">&quot;Add hello world script by php&quot;</span></span><br></pre></td></tr></table></figure><p>添加成功后，可以通过 <code>git log</code> 命令查看提交日志。</p><h4 id="3-2-4-进行-push"><a class="header-anchor" href="#3-2-4-进行-push">¶</a>3.2.4 进行 push</h4><p>之后只要执行 push，GitHub 上的仓库就会被更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样一来，代码就在 GitHub 上公开了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第-3-章：使用-GitHub-的前期准备&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第-3-章：使用-GitHub-的前期准备&quot;&gt;¶&lt;/a&gt;第 3 章：使用 GitHub 的前期准备&lt;/h2&gt;
&lt;h3 id=&quot;3-1-使用前的准备&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3-1-使用前的准备&quot;&gt;¶&lt;/a&gt;3.1 使用前的准备&lt;/h3&gt;
&lt;h4 id=&quot;3-1-1-设置-SSH-Key&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3-1-1-设置-SSH-Key&quot;&gt;¶&lt;/a&gt;3.1.1 设置 SSH Key&lt;/h4&gt;
&lt;p&gt;GitHub 上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥认证方式进行的。&lt;/p&gt;
&lt;h4 id=&quot;3-1-2-使用社区功能&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3-1-2-使用社区功能&quot;&gt;¶&lt;/a&gt;3.1.2 使用社区功能&lt;/h4&gt;
&lt;p&gt;通过 Follow 感兴趣的人，来知道他在 GitHub 上的行为。&lt;br&gt;
&lt;img src=&quot;/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-17-07.png&quot; alt=&quot;Follow&quot;&gt;&lt;br&gt;
对于仓库，还可以用 Watch 功能获取最新的开发信息。&lt;br&gt;
&lt;img src=&quot;/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-19-06.png&quot; alt=&quot;Watch&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 学习（第 2 章）</title>
    <link href="http://example.com/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/"/>
    <id>http://example.com/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/</id>
    <published>2021-05-01T02:23:32.000Z</published>
    <updated>2021-05-01T05:29:01.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-2-章：Git-的导入"><a class="header-anchor" href="#第-2-章：Git-的导入">¶</a>第 2 章：Git 的导入</h2><h3 id="2-1-什么是-Git"><a class="header-anchor" href="#2-1-什么是-Git">¶</a>2.1 什么是 Git?</h3><p>Git 属于分散型版本管理系统，是为版本管理而设计的软件。</p><h3 id="2-2-什么是版本管理？"><a class="header-anchor" href="#2-2-什么是版本管理？">¶</a>2.2 什么是版本管理？</h3><p>版本管理就是管理更新的历史记录，例如记录一款软件添加或更改源代码的过程，回滚到特定阶段，恢复误删除的文件等。</p><span id="more"></span><h4 id="2-2-1-集中型和分散型"><a class="header-anchor" href="#2-2-1-集中型和分散型">¶</a>2.2.1 集中型和分散型</h4><p>（1）集中型：将数据集中存放在服务器中，只有一个仓库。<br><img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/2021-05-01-12-05-27.png" alt="集中型"><br>（2）分散型：拥有多个仓库，所有仓库之间都可进行 push 和 pull。<br><img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/2021-05-01-12-10-53.png" alt="分散型"></p><h3 id="2-3-安装Git"><a class="header-anchor" href="#2-3-安装Git">¶</a>2.3 安装Git</h3><h4 id="2-3-1-Windows-下安装-Git"><a class="header-anchor" href="#2-3-1-Windows-下安装-Git">¶</a>2.3.1 Windows 下安装 Git</h4><p>最简单快捷的方法是使用<a href="http://msysgit.github.io/">msysGit</a></p><h4 id="2-3-2-关于-Git-Bash"><a class="header-anchor" href="#2-3-2-关于-Git-Bash">¶</a>2.3.2 关于 Git Bash</h4><p>专门用于执行 Git 命令的命令行提示符。</p><h3 id="2-4-初始设置"><a class="header-anchor" href="#2-4-初始设置">¶</a>2.4 初始设置</h3><h4 id="2-4-1-设置姓名和邮箱地址"><a class="header-anchor" href="#2-4-1-设置姓名和邮箱地址">¶</a>2.4.1 设置姓名和邮箱地址</h4><p>首先设置使用 Git 时的姓名和邮箱地址，名字请用英文输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Firstname Lastname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>注意：请不要使用不方便公开的信息。</p><h4 id="2-4-2-提高命令输出的可读性"><a class="header-anchor" href="#2-4-2-提高命令输出的可读性">¶</a>2.4.2 提高命令输出的可读性</h4><p>将 color.ui 设置为 auto。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第-2-章：Git-的导入&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第-2-章：Git-的导入&quot;&gt;¶&lt;/a&gt;第 2 章：Git 的导入&lt;/h2&gt;
&lt;h3 id=&quot;2-1-什么是-Git&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-1-什么是-Git&quot;&gt;¶&lt;/a&gt;2.1 什么是 Git?&lt;/h3&gt;
&lt;p&gt;Git 属于分散型版本管理系统，是为版本管理而设计的软件。&lt;/p&gt;
&lt;h3 id=&quot;2-2-什么是版本管理？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-2-什么是版本管理？&quot;&gt;¶&lt;/a&gt;2.2 什么是版本管理？&lt;/h3&gt;
&lt;p&gt;版本管理就是管理更新的历史记录，例如记录一款软件添加或更改源代码的过程，回滚到特定阶段，恢复误删除的文件等。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 学习（第 1 章）</title>
    <link href="http://example.com/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/"/>
    <id>http://example.com/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/</id>
    <published>2021-04-30T10:31:27.000Z</published>
    <updated>2021-04-30T14:37:06.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-1-章：欢迎来到-GitHub-的世界"><a class="header-anchor" href="#第-1-章：欢迎来到-GitHub-的世界">¶</a>第 1 章：欢迎来到 GitHub 的世界</h2><h3 id="1-1-什么是-GitHub"><a class="header-anchor" href="#1-1-什么是-GitHub">¶</a>1.1 什么是 GitHub?</h3><p>GitHub 是为开发者提供 Git 仓库的托管服务。<br><img src="/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/2021-04-30-19-28-24.png" alt="GitHub 界面"></p><h4 id="1-1-1-GitHub-与-Git-的区别"><a class="header-anchor" href="#1-1-1-GitHub-与-Git-的区别">¶</a>1.1.1 GitHub 与 Git 的区别</h4><p>本地 Git：管理“Git 仓库”中的源代码。<br>网络 GitHub：将“Git 仓库”公开于网络。</p><span id="more"></span><h3 id="1-2-为什么使用-GitHub？"><a class="header-anchor" href="#1-2-为什么使用-GitHub？">¶</a>1.2 为什么使用 GitHub？</h3><h4 id="1-2-1-关于-Pull-Request"><a class="header-anchor" href="#1-2-1-关于-Pull-Request">¶</a>1.2.1 关于 Pull Request</h4><p>功能：<br>（1）开发者在本地对源代码进行更改后，向 GitHub 中托管的 Git 仓库请求合并。<br>（2）对比源代码前后差别。<br>（3）针对指定代码进行讨论交流。</p><h4 id="1-2-2-关于-Issue"><a class="header-anchor" href="#1-2-2-关于-Issue">¶</a>1.2.2 关于 Issue</h4><p>将一个任务或问题分配给一个 Issue 进行追踪和管理，任务管理和 BUG 报告可以通过 Issue 进行交互，每一个功能更改或修正都对应一个 Issue。</p><h4 id="1-2-3-关于-Wiki"><a class="header-anchor" href="#1-2-3-关于-Wiki">¶</a>1.2.3 关于 Wiki</h4><p>通过 Wiki 功能，方便多人共同完成一篇文章。多用于开发文档或手册的编写。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第-1-章：欢迎来到-GitHub-的世界&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#第-1-章：欢迎来到-GitHub-的世界&quot;&gt;¶&lt;/a&gt;第 1 章：欢迎来到 GitHub 的世界&lt;/h2&gt;
&lt;h3 id=&quot;1-1-什么是-GitHub&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-1-什么是-GitHub&quot;&gt;¶&lt;/a&gt;1.1 什么是 GitHub?&lt;/h3&gt;
&lt;p&gt;GitHub 是为开发者提供 Git 仓库的托管服务。&lt;br&gt;
&lt;img src=&quot;/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/2021-04-30-19-28-24.png&quot; alt=&quot;GitHub 界面&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-1-1-GitHub-与-Git-的区别&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-1-1-GitHub-与-Git-的区别&quot;&gt;¶&lt;/a&gt;1.1.1 GitHub 与 Git 的区别&lt;/h4&gt;
&lt;p&gt;本地 Git：管理“Git 仓库”中的源代码。&lt;br&gt;
网络 GitHub：将“Git 仓库”公开于网络。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>SiGe HBT 器件选型</title>
    <link href="http://example.com/2021/04/29/SiGe%20HBT%20%E5%99%A8%E4%BB%B6%E9%80%89%E5%9E%8B/"/>
    <id>http://example.com/2021/04/29/SiGe%20HBT%20%E5%99%A8%E4%BB%B6%E9%80%89%E5%9E%8B/</id>
    <published>2021-04-29T01:40:55.000Z</published>
    <updated>2021-04-30T14:37:01.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买途径贸泽商城"><a class="header-anchor" href="#购买途径贸泽商城">¶</a>购买途径<a href="https://www.mouser.cn/">贸泽商城</a></h2><table><thead><tr><th style="text-align:left">型号</th><th style="text-align:left">厂家</th><th style="text-align:left">工作频率</th><th style="text-align:left">封装</th><th style="text-align:left">生产日期</th></tr></thead><tbody><tr><td style="text-align:left">BFP840ESD</td><td style="text-align:left">Infineon英飞凌</td><td style="text-align:left">80GHz</td><td style="text-align:left">SOT343</td><td style="text-align:left">2018-09-26</td></tr><tr><td style="text-align:left">BFP740ESD</td><td style="text-align:left">Infineon英飞凌</td><td style="text-align:left">47GHz</td><td style="text-align:left">SOT343</td><td style="text-align:left">2018-09-26</td></tr><tr><td style="text-align:left">BFP640ESD</td><td style="text-align:left">Infineon英飞凌</td><td style="text-align:left">46GHz</td><td style="text-align:left">SOT343</td><td style="text-align:left">2019-01-25</td></tr><tr><td style="text-align:left">BFU690F</td><td style="text-align:left">NXP恩智浦</td><td style="text-align:left">18GHz</td><td style="text-align:left">SOT343</td><td style="text-align:left">2014-03-14</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;购买途径贸泽商城&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#购买途径贸泽商城&quot;&gt;¶&lt;/a&gt;购买途径&lt;a href=&quot;https://www.mouser.cn/&quot;&gt;贸泽商城&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</summary>
      
    
    
    
    <category term="工作" scheme="http://example.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="SiGe" scheme="http://example.com/tags/SiGe/"/>
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="http://example.com/2021/04/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/04/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-04-28T16:25:50.000Z</published>
    <updated>2021-04-30T15:33:59.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="破壳而出👶"><a class="header-anchor" href="#破壳而出👶">¶</a>破壳而出👶</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;破壳而出👶&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#破壳而出👶&quot;&gt;¶&lt;/a&gt;破壳而出👶&lt;/h2&gt;
</summary>
      
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
