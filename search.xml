<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub 学习（第 1 章）</title>
    <url>/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第-1-章：欢迎来到-GitHub-的世界"><a class="header-anchor" href="#第-1-章：欢迎来到-GitHub-的世界">¶</a>第 1 章：欢迎来到 GitHub 的世界</h2>
<h3 id="1-1-什么是-GitHub"><a class="header-anchor" href="#1-1-什么是-GitHub">¶</a>1.1 什么是 GitHub?</h3>
<p>GitHub 是为开发者提供 Git 仓库的托管服务。<br>
<img src="/2021/04/30/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%201%20%E7%AB%A0%EF%BC%89/2021-04-30-19-28-24.png" alt="GitHub 界面"></p>
<h4 id="1-1-1-GitHub-与-Git-的区别"><a class="header-anchor" href="#1-1-1-GitHub-与-Git-的区别">¶</a>1.1.1 GitHub 与 Git 的区别</h4>
<p>本地 Git：管理“Git 仓库”中的源代码。<br>
网络 GitHub：将“Git 仓库”公开于网络。</p>
<span id="more"></span>
<h3 id="1-2-为什么使用-GitHub？"><a class="header-anchor" href="#1-2-为什么使用-GitHub？">¶</a>1.2 为什么使用 GitHub？</h3>
<h4 id="1-2-1-关于-Pull-Request"><a class="header-anchor" href="#1-2-1-关于-Pull-Request">¶</a>1.2.1 关于 Pull Request</h4>
<p>功能：<br>
（1）开发者在本地对源代码进行更改后，向 GitHub 中托管的 Git 仓库请求合并。<br>
（2）对比源代码前后差别。<br>
（3）针对指定代码进行讨论交流。</p>
<h4 id="1-2-2-关于-Issue"><a class="header-anchor" href="#1-2-2-关于-Issue">¶</a>1.2.2 关于 Issue</h4>
<p>将一个任务或问题分配给一个 Issue 进行追踪和管理，任务管理和 BUG 报告可以通过 Issue 进行交互，每一个功能更改或修正都对应一个 Issue。</p>
<h4 id="1-2-3-关于-Wiki"><a class="header-anchor" href="#1-2-3-关于-Wiki">¶</a>1.2.3 关于 Wiki</h4>
<p>通过 Wiki 功能，方便多人共同完成一篇文章。多用于开发文档或手册的编写。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 学习（第 2 章）</title>
    <url>/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第-2-章：Git-的导入"><a class="header-anchor" href="#第-2-章：Git-的导入">¶</a>第 2 章：Git 的导入</h2>
<h3 id="2-1-什么是-Git"><a class="header-anchor" href="#2-1-什么是-Git">¶</a>2.1 什么是 Git?</h3>
<p>Git 属于分散型版本管理系统，是为版本管理而设计的软件。</p>
<h3 id="2-2-什么是版本管理？"><a class="header-anchor" href="#2-2-什么是版本管理？">¶</a>2.2 什么是版本管理？</h3>
<p>版本管理就是管理更新的历史记录，例如记录一款软件添加或更改源代码的过程，回滚到特定阶段，恢复误删除的文件等。</p>
<span id="more"></span>
<h4 id="2-2-1-集中型和分散型"><a class="header-anchor" href="#2-2-1-集中型和分散型">¶</a>2.2.1 集中型和分散型</h4>
<p>（1）集中型：将数据集中存放在服务器中，只有一个仓库。<br>
<img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/2021-05-01-12-05-27.png" alt="集中型"><br>
（2）分散型：拥有多个仓库，所有仓库之间都可进行 push 和 pull。<br>
<img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%202%20%E7%AB%A0%EF%BC%89/2021-05-01-12-10-53.png" alt="分散型"></p>
<h3 id="2-3-安装Git"><a class="header-anchor" href="#2-3-安装Git">¶</a>2.3 安装Git</h3>
<h4 id="2-3-1-Windows-下安装-Git"><a class="header-anchor" href="#2-3-1-Windows-下安装-Git">¶</a>2.3.1 Windows 下安装 Git</h4>
<p>最简单快捷的方法是使用<a href="http://msysgit.github.io/">msysGit</a></p>
<h4 id="2-3-2-关于-Git-Bash"><a class="header-anchor" href="#2-3-2-关于-Git-Bash">¶</a>2.3.2 关于 Git Bash</h4>
<p>专门用于执行 Git 命令的命令行提示符。</p>
<h3 id="2-4-初始设置"><a class="header-anchor" href="#2-4-初始设置">¶</a>2.4 初始设置</h3>
<h4 id="2-4-1-设置姓名和邮箱地址"><a class="header-anchor" href="#2-4-1-设置姓名和邮箱地址">¶</a>2.4.1 设置姓名和邮箱地址</h4>
<p>首先设置使用 Git 时的姓名和邮箱地址，名字请用英文输入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Firstname Lastname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意：请不要使用不方便公开的信息。</p>
<h4 id="2-4-2-提高命令输出的可读性"><a class="header-anchor" href="#2-4-2-提高命令输出的可读性">¶</a>2.4.2 提高命令输出的可读性</h4>
<p>将 color.ui 设置为 auto。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 学习（第 3 章）</title>
    <url>/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第-3-章：使用-GitHub-的前期准备"><a class="header-anchor" href="#第-3-章：使用-GitHub-的前期准备">¶</a>第 3 章：使用 GitHub 的前期准备</h2>
<h3 id="3-1-使用前的准备"><a class="header-anchor" href="#3-1-使用前的准备">¶</a>3.1 使用前的准备</h3>
<h4 id="3-1-1-设置-SSH-Key"><a class="header-anchor" href="#3-1-1-设置-SSH-Key">¶</a>3.1.1 设置 SSH Key</h4>
<p>GitHub 上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥认证方式进行的。</p>
<h4 id="3-1-2-使用社区功能"><a class="header-anchor" href="#3-1-2-使用社区功能">¶</a>3.1.2 使用社区功能</h4>
<p>通过 Follow 感兴趣的人，来知道他在 GitHub 上的行为。<br>
<img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-17-07.png" alt="Follow"><br>
对于仓库，还可以用 Watch 功能获取最新的开发信息。<br>
<img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-19-06.png" alt="Watch"></p>
<span id="more"></span>
<h3 id="3-2-实际动手使用"><a class="header-anchor" href="#3-2-实际动手使用">¶</a>3.2 实际动手使用</h3>
<h4 id="3-2-1-clone-已有仓库"><a class="header-anchor" href="#3-2-1-clone-已有仓库">¶</a>3.2.1 clone 已有仓库</h4>
<p>将已有的仓库 clone 到身边的开发环境中。<br>
<img src="/2021/05/01/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%203%20%E7%AB%A0%EF%BC%89/2021-05-01-16-30-34.png" alt="clone"><br>
在 Git Bash 中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:hirocastest/Hello-World.git</span><br></pre></td></tr></table></figure>
<p>在输入 GitHub 上设置的公开密钥的密码，并认证成功后，仓库便会被 clone 至仓库名后的目录中。将想要公开的代码提交至这个仓库再 push 到 GitHub 仓库中，代码便会被公开。</p>
<h4 id="3-2-2-编写代码"><a class="header-anchor" href="#3-2-2-编写代码">¶</a>3.2.2 编写代码</h4>
<p>编写代码文件后，例如 hello_world.php，由于还未被添加至 Git 仓库，所以输入命令 <code>git status</code> 显示为 Untracked files。</p>
<h4 id="3-2-3-提交代码"><a class="header-anchor" href="#3-2-3-提交代码">¶</a>3.2.3 提交代码</h4>
<p>将 hello_world.php 提交至仓库，该文件就进入版本管理系统的管理之下，由 Git 进行管理。</p>
<p>通过 <code>git add</code> 命令将文件加入暂存区，再通过 <code>git commit</code> 命令提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add hello_world.php</span><br><span class="line">git commit -m <span class="string">&quot;Add hello world script by php&quot;</span></span><br></pre></td></tr></table></figure>
<p>添加成功后，可以通过 <code>git log</code> 命令查看提交日志。</p>
<h4 id="3-2-4-进行-push"><a class="header-anchor" href="#3-2-4-进行-push">¶</a>3.2.4 进行 push</h4>
<p>之后只要执行 push，GitHub 上的仓库就会被更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>这样一来，代码就在 GitHub 上公开了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 学习（第 4 章）</title>
    <url>/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第-4-章：通过实际操作学习-Git"><a class="header-anchor" href="#第-4-章：通过实际操作学习-Git">¶</a>第 4 章：通过实际操作学习 Git</h2>
<h3 id="4-1-基本操作"><a class="header-anchor" href="#4-1-基本操作">¶</a>4.1 基本操作</h3>
<h4 id="4-1-1-初始化仓库"><a class="header-anchor" href="#4-1-1-初始化仓库">¶</a>4.1.1 初始化仓库</h4>
<p>要使用 Git 进行版本管理，必须先初始化仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir git-tutorial</span><br><span class="line"><span class="built_in">cd</span> git-tutorial</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>其中工作目录中的内容称为“附属于该仓库的工作树”。</p>
<span id="more"></span>
<h4 id="4-1-2-查看仓库的状态"><a class="header-anchor" href="#4-1-2-查看仓库的状态">¶</a>4.1.2 查看仓库的状态</h4>
<p><code>git status</code> 命令用于显示 Git 仓库的状态。</p>
<h4 id="4-1-3-向暂存区中添加文件"><a class="header-anchor" href="#4-1-3-向暂存区中添加文件">¶</a>4.1.3 向暂存区中添加文件</h4>
<p>要让文件成为 Git 仓库的管理对象，就需要用 git add 命令将其加入暂存区（ stage 或者 Index ）中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<h4 id="4-1-4-保存仓库的历史记录"><a class="header-anchor" href="#4-1-4-保存仓库的历史记录">¶</a>4.1.4 保存仓库的历史记录</h4>
<p><code>git commit</code> 命令可以将当前暂存区中的文件实际保存到仓库的历史记录中。通过这些记录，我们就能在工作树中复员文件。</p>
<h4 id="4-1-5-查看提交日志"><a class="header-anchor" href="#4-1-5-查看提交日志">¶</a>4.1.5 查看提交日志</h4>
<p><code>git log</code> 命令可以查看以往仓库中提交的日志。</p>
<h4 id="4-1-6-查看更改前后的差别"><a class="header-anchor" href="#4-1-6-查看更改前后的差别">¶</a>4.1.6 查看更改前后的差别</h4>
<p><code>git diff</code> 命令可以查看工作树、暂存区、最新提交之间的差别。</p>
<h3 id="4-2-分支的操作"><a class="header-anchor" href="#4-2-分支的操作">¶</a>4.2 分支的操作</h3>
<p>在进行多个并行作业时，我们会用到分支。在这类并行开发的过程中，往往同时存在多个最新代码状态。<br>
<img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-19-22-12.png" alt="分支"><br>
不同分支中，可以同时进行完全不同的作业。等该分支的作业完成后再与master分支合并。<br>
<img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-19-25-55.png" alt="分支结束"></p>
<h4 id="4-2-1-显示分支一览表"><a class="header-anchor" href="#4-2-1-显示分支一览表">¶</a>4.2.1 显示分支一览表</h4>
<p><code>git branch</code> 命令可以将分支名列表显示，同时可以确认当前所在的分支。</p>
<h4 id="4-2-2-创建、切换分支"><a class="header-anchor" href="#4-2-2-创建、切换分支">¶</a>4.2.2 创建、切换分支</h4>
<p>以当前 master 分支为基础创建新的分支，需要用到 <code>git checkout -b</code>命令。</p>
<h4 id="4-2-3-特性分支与主干分支"><a class="header-anchor" href="#4-2-3-特性分支与主干分支">¶</a>4.2.3 特性分支与主干分支</h4>
<p>特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。通常用 master 为主干分支，也是合并的终点。<br>
<img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-20-06-52.png" alt="特性分支"></p>
<h4 id="4-2-4-合并分支"><a class="header-anchor" href="#4-2-4-合并分支">¶</a>4.2.4 合并分支</h4>
<p>利用 <code>git merge</code> 命令可以将分支合并到 master 主干分支。</p>
<h4 id="4-2-5-以图表形式查看分支"><a class="header-anchor" href="#4-2-5-以图表形式查看分支">¶</a>4.2.5 以图表形式查看分支</h4>
<p>以图表形式输出提交日志需要用到 <code>git log --graph</code> 命令，非常直观。</p>
<h3 id="4-3-更改提交的操作"><a class="header-anchor" href="#4-3-更改提交的操作">¶</a>4.3 更改提交的操作</h3>
<p>Git 的另一特性是可以灵活操作历史版本。</p>
<h4 id="4-3-1-回溯历史版本"><a class="header-anchor" href="#4-3-1-回溯历史版本">¶</a>4.3.1 回溯历史版本</h4>
<p>例如，回溯到创建 feature-A 分支之前，创建一个 fix-B 特性分支。<br>
<img src="/2021/05/02/GitHub%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AC%AC%204%20%E7%AB%A0%EF%BC%89/2021-05-04-20-16-04.png" alt="回溯历史"><br>
要让仓库的 HEAD、暂存区、当前工作树回溯到指定状态，需要用到 <code>git reset --hard</code> 命令。执行 <code>git reflog</code> 命令，查看当前仓库执行过的操作的日志。</p>
<h4 id="4-3-2-修改提交信息"><a class="header-anchor" href="#4-3-2-修改提交信息">¶</a>4.3.2 修改提交信息</h4>
<p>要修改提交的信息，可以执行 <code>git commit --amend</code> 命令。</p>
<h3 id="4-4-推送至远程仓库"><a class="header-anchor" href="#4-4-推送至远程仓库">¶</a>4.4 推送至远程仓库</h3>
<p>使用 <code>git remote add</code> 命令设置本地仓库的远程仓库。将当前分支下本地仓库的内容推送至远程仓库，需要用到 <code>git push</code> 命令。</p>
<h3 id="4-5-从远程仓库获取"><a class="header-anchor" href="#4-5-从远程仓库获取">¶</a>4.5 从远程仓库获取</h3>
<h4 id="4-5-1-获取远程仓库"><a class="header-anchor" href="#4-5-1-获取远程仓库">¶</a>4.5.1 获取远程仓库</h4>
<p>执行 <code>git clone</code> 命令将 Github 上的仓库 clone 至本地。</p>
<h4 id="4-5-2-获取最新的远程仓库分支"><a class="header-anchor" href="#4-5-2-获取最新的远程仓库分支">¶</a>4.5.2 获取最新的远程仓库分支</h4>
<p>执行 <code>git pull</code> 命令，可以将本地仓库更新至最新状态。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>SiGe HBT 器件选型</title>
    <url>/2021/04/29/SiGe%20HBT%20%E5%99%A8%E4%BB%B6%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="购买途径贸泽商城"><a class="header-anchor" href="#购买途径贸泽商城">¶</a>购买途径<a href="https://www.mouser.cn/">贸泽商城</a></h2>
<table>
<thead>
<tr>
<th style="text-align:left">型号</th>
<th style="text-align:left">厂家</th>
<th style="text-align:left">工作频率</th>
<th style="text-align:left">封装</th>
<th style="text-align:left">生产日期</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BFP840ESD</td>
<td style="text-align:left">Infineon英飞凌</td>
<td style="text-align:left">80GHz</td>
<td style="text-align:left">SOT343</td>
<td style="text-align:left">2018-09-26</td>
</tr>
<tr>
<td style="text-align:left">BFP740ESD</td>
<td style="text-align:left">Infineon英飞凌</td>
<td style="text-align:left">47GHz</td>
<td style="text-align:left">SOT343</td>
<td style="text-align:left">2018-09-26</td>
</tr>
<tr>
<td style="text-align:left">BFP640ESD</td>
<td style="text-align:left">Infineon英飞凌</td>
<td style="text-align:left">46GHz</td>
<td style="text-align:left">SOT343</td>
<td style="text-align:left">2019-01-25</td>
</tr>
<tr>
<td style="text-align:left">BFU690F</td>
<td style="text-align:left">NXP恩智浦</td>
<td style="text-align:left">18GHz</td>
<td style="text-align:left">SOT343</td>
<td style="text-align:left">2014-03-14</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>SiGe</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个博客</title>
    <url>/2021/04/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="破壳而出👶"><a class="header-anchor" href="#破壳而出👶">¶</a>破壳而出👶</h2>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>毫米波雷达基础（一）</title>
    <url>/2022/08/08/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="毫米波雷达的优点"><a class="header-anchor" href="#毫米波雷达的优点">¶</a>毫米波雷达的优点</h2>
<p>毫米波（mmWave）雷达是一类使用短波长电磁波的特殊雷达，其发射波长为毫米量级的信号。电磁频谱如下图所示，毫米波波长被视为短波长。<br>
<img src="/2022/08/08/%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/%E7%94%B5%E7%A3%81%E9%A2%91%E8%B0%B1.jpg" alt="电磁频谱"></p>
<span id="more"></span>
<p>短波长的优势之一就是处理毫米波信号所需的系统组件（如天线）的尺寸很小，可将用于发送（TX）和接收（RX）的射频（RF）组件，时钟模拟组件，还有模数转换器（ADC）、微控制器（MCU）和数字信号处理器（DSP）等数字器件集成分布，降低功耗和系统总成本。</p>
<p>短波长的另一项优势是高准确度。工作频率为76~81GHz（对应波长约为4mm）的毫米波系统将能够检测小至零点几毫米的移动。</p>
<p>但集成分布带来的复杂性和雷达自身的高频率要求使得系统设计颇具挑战性。线性调频连续波（FMCW）雷达是连续波雷达的一种特殊类型，相对于简单连续波（CW）雷达，通过对发射信号的频率调制（或相位调制）来改变其工作频率。通过对工作频率（或相位）的测量来实现对目标信息的探测。接下来我们将详细介绍线性调频连续波雷达。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>雷达系统简介</title>
    <url>/2022/08/16/%E9%9B%B7%E8%BE%BE%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>一个典型的雷达系统应当包含以下组件：<br>
1.天线<br>
天线是用来实现电磁波和电信号的转化的。天线将来自发射机的电信号以电磁波的形式辐射到空间，在遇到目标后电磁波反射，天线在接收到回波后将其转化为电信号用于后续的分析处理。正如我们在图1中看到的，天线似乎有一个指向，这就是经常提到的天线方向图，天线在某一个方向上的增益是大于其他方向上的，因此我们经常看到的天线在不停地转，就是在调整接收方向。题图中是美军的萨德系统雷达，这部雷达似乎没有我们印象中的雷达天线。这是因为萨德使用的是相控阵雷达，相控阵雷达的天线与传统雷达天线有很大的不同，在专门介绍相控阵时会更深入介绍。这部分研究主要涉及到的是雷达天线的设计。</p>
<span id="more"></span>
<p>2.发射机<br>
发射机是产生雷达信号并经功率放大后送至天线。这部分最关键的功能在于雷达波形设计。在使用雷达时我们通常希望雷达能够更精确地定位目标且不会受到干扰，这就需要我们设计复杂的雷达信号。举个简单的例子，比如我方雷达工作在4GHz的频率，敌方很容易就能探测到我方雷达工作频率，然后就可以对我方实施电子干扰，我方雷达就不能正常工作了，为了避免这种情况的发生，我们往往需要更不易被干扰的雷达信号。这部分研究主要涉及到的是雷达波形的设计。<br>
3.接收机<br>
一般情况下我们无法直接分析来自天线的信号，为了得到更高的测量精度以及更好的抗干扰性能，雷达信号的频率一般都是比较高的，可以达到几十GHz，这需要我们用极快处理速度的处理器和极快传输速度的数据线来处理。为此在实际雷达信号处理中，往往通过一个接收机来对信号进行下变频至2GHz以内，再用于后续处理，至于为什么可以把几十GHz的信号下变频到2GHz以内涉及到了中频采样和信号带宽的问题，不在这里过多赘述。<br>
4.信号处理机<br>
这部分可以看作是雷达最核心的部分。信号处理机首先通过ADC（模拟信号到数字信号转换器）将来自接收机的模拟信号转化为数字信号，这个时候我们就可以把信号传输到电脑上进行处理了。但是电脑的处理速度太慢，因此实际雷达系统都是通过嵌入式系统来处理信号（可以实现更快的处理速度）。无论是在电脑上处理还是在嵌入式系统中处理，目的在于通过对信号的分析，从中获得目标的位置和速度信息。<br>
5.主机<br>
信号处理机在分析获得目标信息后，将目标信息传送到主机，主机有可能会配备诸如图2这样的显示器来以图形化的方式显示目标信息，也有可能以表格的形式显示目标信息，取决于使用者的需求。</p>
<p>刚才我们以雷达信号传输的顺序介绍了雷达系统的组成，需要注意的是，通常还会有一条反向的控制信号传输路线，比如我们正在观测正北方的目标，想要观测正东方的目标，即使用者通过主机下达命令，然后通过信号处理机、接收机到达天线，控制天线转动至正东方。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
